name: PlantD
version: 1.0.0
dataGenerator:
  defaultImage: ghcr.io/carnegiemellon-plantd/datagenerator:latest
  defaultParallelism: 1
  backoffLimit: 0
  defaultStorageSize: 2Gi
  path: /test # Default path where K6 looks for files
monitor:
  service:
    labelKeys:
      pipeline: plantd-pipeline
      experiment: plantd-experiment
    portName: metrics
  serviceMonitor:
    labels:
      app: plantd-monitor
    endpoint:
      defaultPort: metrics
      defaultPath: /metrics
loadGenerator:
  filename:
    script: script.js
    endpoint: endpoint.json
    plainText: plaintext.txt
    dataSet: dataset.json
    loadPattern: loadpattern.json
  copier:
    image: busybox:1.36.1
    backoffLimit: 0
  testRun:
    remoteWriteArgs: --out experimental-prometheus-rw
    remoteWriteEnvVar:
      name: K6_PROMETHEUS_RW_SERVER_URL
      value: http://prometheus-service.plantd-operator-system.svc:9090/api/v1/write


costService:
  image: ghcr.io/carnegiemellon-plantd/costexporter:latest
  opencost:
    url: http://opencost.plantd-operator-system.svc.cluster.local:9003
digitalTwin:
  image: ghcr.io/carnegiemellon-plantd/digitaltwin:latest
plantDCore:
  serviceAccountName: plantd-operator-controller-manager
  kubeProxy:
    labels:
      app: plantd-proxy
    containerName: plantd-proxy
    image: ghcr.io/carnegiemellon-plantd/plantd-proxy:latest
    deploymentName: plantd-proxy-deployment
    replicas: 1
    serviceName: plantd-proxy-service
    port: 5000
    targetPort: 5000
  studio:
    labels:
      app: plantd-studio
    containerName: plantd-studio
    image: ghcr.io/carnegiemellon-plantd/plantd-studio:latest
    deploymentName: plantd-studio-deployment
    replicas: 1
    serviceName: plantd-studio-service
    port: 80
    targetPort: 8080
  prometheus:
    labels:
      prometheus: prometheus
    serviceAccountName: prometheus
    clusterRoleName: plantd-prometheus-role
    clusterRoleBindingName: plantd-prometheus-role-binding
    name: prometheus
    scrapeInterval: 15s
    replicas: 1
    memoryLimit: 1Gi
    serviceName: prometheus-service
    port: 9090
    targetPort: 9090
    nodePort: 30900
    securityContext:
      runAsUser: 1000
      fsGroup: 2000
      runAsGroup: 2000
      runAsNonRoot: true
    thanos:
      thanosBaseImage: quay.io/thanos/thanos
      thanosVersion: v0.34.0
      thanosConfig:
        name: thanos-objstore-config
        key: thanos.yaml
    thanosQuerier:
      deploymentName: thanos-querier
      labels:
        app: thanos-querier
      image: quay.io/thanos/thanos:v0.34.0
      replicas: 1
      httpPort: 9090
      grpcPort: 10901
      url: thanos-sidecar-grpc.plantd-operator-system.svc.cluster.local:10901
    thanosStore:
      name: thanos-store
      serviceName: thanos-store-grpc
      labels:
        app: thanos-store
      image: quay.io/thanos/thanos:v0.34.0
      replicas: 1
      volumeSize: 1Gi
      dataDir: /thanos-data
      httpPort: 10902
      grpcPort: 10901
      url: thanos-store-grpc.plantd-operator-system.svc.cluster.local:10901
      securityContext:
        fsGroup: 65534
        runAsGroup: 65532
        runAsUser: 65534
    thanosSidecarService:
      portName: grpc
      port: 10901

  redis:
    labels:
      app: redis
    containerName: redis
    image: redis/redis-stack-server:latest
    deploymentName: redis-deployment
    replicas: 1
    serviceName: redis-service
    port: 6379
    targetPort: 6379

opencost:
  serviceAccount: opencost
  clusterRole: opencost
  deployment:
    image: quay.io/kubecost1/kubecost-cost-model:latest
    ui-image: quay.io/kubecost1/opencost-ui:1.105.2
    replicas: 1
    maxSurge: 1
    maxUnavailable: 1
    runAsUser: 1001
    labels:
      plantd-opencost: opencost
  service:
    port: 9003
    ui-port: 9090
    labels:
      plantd-opencost: opencost
  opencostServiceMonitor:
    name: opencost-service-monitor
    labels:
      component: plantd-metrics-endpoint
    selector:
      plantd-opencost: opencost
  cadvisorServiceMonitor:
    name: cadvisor-service-monitor
    labels:
      component: plantd-metrics-endpoint
    selector:
      k8s-app: kubelet
    namespaceSelector: kube-system


database:
  prometheus:
    # Ensure Prometheus service name, namespace, and port are correct
    url: http://prometheus-service.plantd-operator-system.svc.cluster.local:9090
    thanosUrl: http://thanos-querier.plantd-operator-system.svc.cluster.local:9090
  redis:
    # Ensure Redis service name, namespace, and port are correct
    host: redis-service.plantd-operator-system.svc.cluster.local
    port: 6379