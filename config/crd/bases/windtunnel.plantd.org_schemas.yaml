---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: schemas.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: Schema
    listKind: SchemaList
    plural: schemas
    singular: schema
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Schema is the Schema for the schemas API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SchemaSpec defines the desired state of Schema.
            properties:
              columns:
                description: List of columns in the Schema.
                items:
                  description: ColumnSpec defines the column in Schema.
                  properties:
                    formula:
                      description: Formula to be applied for populating the data in
                        the column. This field has precedence over the `type` fields.
                      properties:
                        args:
                          description: Arguments to be passed to the formula. Used
                            together with the `name` field. See https://plantd.org/docs/reference/formulas
                            for available values.
                          items:
                            type: string
                          type: array
                        name:
                          description: Name of the formula. Used together with the
                            `args` field. See https://plantd.org/docs/reference/formulas
                            for available values.
                          type: string
                      required:
                      - name
                      type: object
                    name:
                      description: Name of the column.
                      type: string
                    params:
                      additionalProperties:
                        type: string
                      description: Map of parameters for generating the data in the
                        column. Used together with the `type` field. For any parameters
                        not provided but required by the data type, the default value
                        will be used, if available. Will ignore any parameters not
                        used by the data type. See https://plantd.org/docs/reference/types-and-params
                        for available values.
                      type: object
                    type:
                      description: Data type of the random data to be generated in
                        the column. Used together with the `params` field. It should
                        be a valid function name in gofakeit, which can be parsed
                        by gofakeit.GetFuncLookup(). `formula` field has precedence
                        over this field. See https://plantd.org/docs/reference/types-and-params
                        for available values.
                      type: string
                  required:
                  - name
                  type: object
                type: array
            required:
            - columns
            type: object
          status:
            description: SchemaStatus defines the observed state of Schema.
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
