---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: loadpatterns.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: LoadPattern
    listKind: LoadPatternList
    plural: loadpatterns
    singular: loadpattern
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LoadPattern is the Schema for the loadpatterns API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LoadPatternSpec defines the desired state of LoadPattern.
            properties:
              maxVUs:
                description: Maximum number of VUs to allow for allocation during
                  Experiment. Equivalent to the "ramping-arrival-rate" executor's
                  `maxVUs` option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                format: int64
                minimum: 0
                type: integer
              preAllocatedVUs:
                description: Number of VUs to pre-allocate before Experiment start.
                  Equivalent to the "ramping-arrival-rate" executor's `preAllocatedVUs`
                  option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                format: int64
                minimum: 0
                type: integer
              stages:
                description: List of stages in the LoadPattern. Equivalent to the
                  "ramping-arrival-rate" executor's `stages` option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                items:
                  description: Stage defines how the load ramps up or down.
                  properties:
                    duration:
                      description: Duration of the stage, also the time to reach the
                        target load. Equivalent to the "ramping-arrival-rate" executor's
                        `stages[].duration` option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                        for more details.
                      type: string
                    target:
                      description: Target load to reach at the end of the stage. Equivalent
                        to the "ramping-arrival-rate" executor's `stages[].target`
                        option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                        for more details.
                      format: int64
                      minimum: 0
                      type: integer
                  required:
                  - duration
                  - target
                  type: object
                minItems: 1
                type: array
              startRate:
                description: Number of requests per `timeUnit` period at Experiment
                  start. Equivalent to the "ramping-arrival-rate" executor's `startRate`
                  option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                format: int64
                minimum: 0
                type: integer
              timeUnit:
                description: Period of time to apply to the `startRate` and `stages[].target`
                  fields. Equivalent to the "ramping-arrival-rate" executor's `timeUnit`
                  option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                type: string
            required:
            - stages
            - startRate
            type: object
          status:
            description: LoadPatternStatus defines the observed state of LoadPattern.
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
