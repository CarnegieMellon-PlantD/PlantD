apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: plantd-operator
    control-plane: controller-manager
  name: plantd-operator-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: costexporters.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: CostExporter
    listKind: CostExporterList
    plural: costexporters
    singular: costexporter
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.lastSuccess
      name: LastSuccess
      type: string
    - jsonPath: .status.lastFailure
      name: LastFailure
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: CostExporter is the Schema for the costexporters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CostExporterSpec defines the desired state of CostExporter.
            properties:
              cloudServiceProvider:
                description: Cloud service provider to calculate costs for. Available
                  value is `aws`.
                enum:
                - aws
                type: string
              config:
                description: 'Configuration for the cloud service provider. For AWS,
                  the configuration should be a JSON string with the following fields:
                  - `AWS_ACCESS_KEY` - `AWS_SECRET_KEY` - `S3_BUCKET_NAME`'
                properties:
                  key:
                    description: The key of the secret to select from.  Must be a
                      valid secret key.
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                  optional:
                    description: Specify whether the Secret or its key must be defined
                    type: boolean
                required:
                - key
                type: object
                x-kubernetes-map-type: atomic
              image:
                description: Container image to use for cost exporter.
                type: string
            required:
            - cloudServiceProvider
            - config
            type: object
          status:
            description: CostExporterStatus defines the observed state of CostExporter.
            properties:
              isRunning:
                description: Whether the Job is running. For internal use only.
                type: boolean
              lastFailure:
                description: Time of the last failed Job run.
                format: date-time
                type: string
              lastSuccess:
                description: Time of the last successful Job run.
                format: date-time
                type: string
            type: object
        type: object
        x-kubernetes-validations:
        - message: must contain at most 44 characters
          rule: size(self.metadata.name) <= 44
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: datasets.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: DataSet
    listKind: DataSetList
    plural: datasets
    singular: dataset
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.jobStatus
      name: JobStatus
      type: string
    - jsonPath: .status.pvcStatus
      name: VolumeStatus
      type: string
    - jsonPath: .status.errorCount
      name: ErrorCount
      type: integer
    - jsonPath: .status.startTime
      name: StartTime
      type: string
    - jsonPath: .status.completionTime
      name: CompletionTime
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DataSet is the Schema for the datasets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DataSetSpec defines the desired state of DataSet.
            properties:
              compressPerSchema:
                description: Flag for compression behavior. Takes effect only if `compressedFileFormat`
                  is set. When set to `false` (default), files from all Schemas will
                  be compressed into a single compressed file in each repetition.
                  When set to `true`, files from each Schema will be compressed into
                  a separate compressed file in each repetition.
                type: boolean
              compressedFileFormat:
                description: Format of the compressed file containing output files.
                  Available value is `zip`. Leave empty to disable compression.
                enum:
                - zip
                type: string
              fileFormat:
                description: Format of the output file containing generated data.
                  Available values are `csv` and `binary`.
                type: string
              image:
                description: Container image to use for the data generator.
                type: string
              numFiles:
                description: Number of files to be generated. If `compressedFileFormat`
                  is unset, this is the number of files for each Schema. If `compressedFileFormat`
                  is set and `compressPerSchema` is `false`, this is the number of
                  compressed files for each Schema. If `compressedFileFormat` is set
                  and `compressPerSchema` is `true`, this is the total number of compressed
                  files.
                format: int32
                minimum: 1
                type: integer
              parallelism:
                description: Number of parallel jobs when generating the dataset.
                  Default to 1.
                format: int32
                minimum: 1
                type: integer
              schemas:
                description: List of Schemas in the DataSet.
                items:
                  description: SchemaSelector defines the reference to a Schema and
                    its usage in the DataSet.
                  properties:
                    name:
                      description: Name of the Schema. Note that the Schema must be
                        present in the same namespace as the DataSet.
                      type: string
                    numFilesPerCompressedFile:
                      description: Range of number of files to be generated in the
                        compressed file. Take effect only if `compressedFileFormat`
                        is set in the DataSet.
                      properties:
                        max:
                          description: Maximum value of the range.
                          format: int32
                          minimum: 0
                          type: integer
                        min:
                          description: Minimum value of the range.
                          format: int32
                          minimum: 0
                          type: integer
                      required:
                      - max
                      - min
                      type: object
                    numRecords:
                      description: Range of number of rows to be generated in each
                        output file.
                      properties:
                        max:
                          description: Maximum value of the range.
                          format: int32
                          minimum: 0
                          type: integer
                        min:
                          description: Minimum value of the range.
                          format: int32
                          minimum: 0
                          type: integer
                      required:
                      - max
                      - min
                      type: object
                  required:
                  - name
                  - numRecords
                  type: object
                maxItems: 65535
                minItems: 1
                type: array
              storageSize:
                anyOf:
                - type: integer
                - type: string
                description: Size of the PVC for the data generator job. Default to
                  2Gi.
                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                x-kubernetes-int-or-string: true
            required:
            - fileFormat
            - numFiles
            - schemas
            type: object
          status:
            description: DataSetStatus defines the observed state of DataSet.
            properties:
              completionTime:
                description: Time when the data generator job completed.
                format: date-time
                type: string
              errorCount:
                description: Number of errors occurred.
                format: int32
                type: integer
              errors:
                additionalProperties:
                  items:
                    type: string
                  type: array
                description: List of errors occurred, which is a map from error type
                  to list of error messages.
                type: object
              jobStatus:
                description: Status of the data generator job.
                type: string
              lastGeneration:
                description: Last generation of the DataSet object. For internal use
                  only.
                format: int64
                type: integer
              pvcStatus:
                description: Status of the PVC for the data generator job.
                type: string
              startTime:
                description: Time when the data generator job started.
                format: date-time
                type: string
            type: object
        type: object
        x-kubernetes-validations:
        - message: must contain at most 39 characters
          rule: size(self.metadata.name) <= 39
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: digitaltwins.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: DigitalTwin
    listKind: DigitalTwinList
    plural: digitaltwins
    singular: digitaltwin
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.jobStatus
      name: JobStatus
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DigitalTwin is the Schema for the digitaltwins API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DigitalTwinSpec defines the desired state of DigitalTwin.
            properties:
              dataSet:
                description: DataSet to break down into Schemas to train the DigitalTwin.
                  Effective only when `digitalTwinType` is `schemaaware`.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              digitalTwinType:
                description: Type of digital twin. Available values are `regular`
                  and `schemaaware`.
                enum:
                - regular
                - schemaaware
                type: string
              experiments:
                description: Existing Experiments to retrieve metrics data from to
                  train the DigitalTwin. Effective only when `digitalTwinType` is
                  `regular`.
                items:
                  description: "ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, \"must refer only to types A and B\" or \"UID not honored\"
                    or \"name must be restricted\". Those cannot be well described
                    when embedded. 3. Inconsistent validation.  Because the usages
                    are different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don't make new APIs embed an underspecified
                    API type they do not control. \n Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    ."
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                minItems: 1
                type: array
              modelType:
                description: Type of digital twin model. Available values are `simple`,
                  `quickscaling`, and `autoscaling`.
                enum:
                - simple
                - quickscaling
                - autoscaling
                type: string
              pipeline:
                description: Pipeline to use to train the DigitalTwin. Effective only
                  when `digitalTwinType` is `schemaaware`.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              pipelineCapacity:
                description: Maximum RPS in the populated LoadPatterns. Effective
                  only when `digitalTwinType` is `schemaaware`.
                format: int32
                type: integer
            required:
            - digitalTwinType
            - modelType
            type: object
          status:
            description: DigitalTwinStatus defines the observed state of DigitalTwin.
            properties:
              error:
                description: Error message.
                type: string
              jobStatus:
                description: Status of the Experiments created by DigitalTwin.
                type: string
            type: object
        type: object
        x-kubernetes-validations:
        - message: must contain at most 22 characters
          rule: size(self.metadata.name) <= 22
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: experiments.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: Experiment
    listKind: ExperimentList
    plural: experiments
    singular: experiment
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.jobStatus
      name: JobStatus
      type: string
    - jsonPath: .status.durations
      name: Durations
      type: string
    - jsonPath: .spec.scheduledTime
      name: ScheduledTime
      type: string
    - jsonPath: .status.startTime
      name: StartTime
      type: string
    - jsonPath: .status.completionTime
      name: CompletionTime
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Experiment is the Schema for the experiments API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ExperimentSpec defines the desired state of Experiment.
            properties:
              drainingTime:
                description: Time to wait after the load generator job is completed
                  before finishing the Experiment. It allows the pipeline-under-test
                  to finish its processing. Default to no draining time. This field
                  is ignored when `endDetection` is set to `true`.
                type: string
              endDetectionImage:
                description: Container image to use for the end detection.
                type: string
              endpointSpecs:
                description: List of tests upon endpoints.
                items:
                  description: EndpointSpec defines the test upon an endpoint.
                  properties:
                    dataSpec:
                      description: Data to be sent to the endpoint.
                      properties:
                        dataSetRef:
                          description: Reference to the DataSet to be sent. The DataSet
                            must be in the same namespace as the Experiment. This
                            field has precedence over the `plainText` field.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        plainText:
                          description: PlainText data to be sent. `dataSetRef` field
                            has precedence over this field.
                          type: string
                      type: object
                    endpointName:
                      description: Name of endpoint. It should be an existing endpoint
                        defined in the Pipeline used by the Experiment.
                      type: string
                    loadPatternRef:
                      description: LoadPattern to follow for the endpoint.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    storageSize:
                      anyOf:
                      - type: integer
                      - type: string
                      description: Size of the PVC for the load generator job. Only
                        effective when `dataSpec.dataSetRef` is set. Default to the
                        PVC size of the DataSet.
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                  required:
                  - dataSpec
                  - endpointName
                  - loadPatternRef
                  type: object
                maxItems: 65535
                minItems: 1
                type: array
              k6InitializerImage:
                description: Container image to use for the K6 initializer.
                type: string
              k6RunnerImage:
                description: Container image to use for the K6 runner.
                type: string
              k6StarterImage:
                description: Container image to use for the K6 starter.
                type: string
              pipelineRef:
                description: Reference to the Pipeline to use for the Experiment.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              scheduledTime:
                description: Scheduled time to run the Experiment.
                format: date-time
                type: string
              useEndDetection:
                description: Whether to use end detection to decide when to finish
                  the Experiment after the load generator job completes. When set
                  to `true`, the `drainingTime` field is ignored.
                type: boolean
            required:
            - endpointSpecs
            - pipelineRef
            type: object
          status:
            description: ExperimentStatus defines the observed state of Experiment.
            properties:
              cloudProvider:
                description: Cloud provider. Available values are `aws`, `azure`,
                  and `gcp`. Copied from the Pipeline used by the Experiment. For
                  internal use only.
                type: string
              completionTime:
                description: Time when the Experiment completed.
                format: date-time
                type: string
              drainingStartTime:
                description: Time when the pipeline-under-test started draining. For
                  internal use only.
                format: date-time
                type: string
              durations:
                additionalProperties:
                  type: string
                description: Calculated duration of each endpoint.
                type: object
              enableCostCalculation:
                description: Whether to enable cost calculation. Copied from the Pipeline
                  used by the Experiment. For internal use only.
                type: boolean
              error:
                description: Error message.
                type: string
              jobStatus:
                description: Status of the load generator job.
                type: string
              startTime:
                description: Time when the Experiment started.
                format: date-time
                type: string
              tags:
                additionalProperties:
                  type: string
                description: Map of tags to select cloud resources. Equivalent to
                  the tags in the cloud service provider. Copied from the Pipeline
                  used by the Experiment. For internal use only.
                type: object
            type: object
        type: object
        x-kubernetes-validations:
        - message: must contain at most 32 characters
          rule: size(self.metadata.name) <= 32
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: loadpatterns.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: LoadPattern
    listKind: LoadPatternList
    plural: loadpatterns
    singular: loadpattern
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LoadPattern is the Schema for the loadpatterns API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LoadPatternSpec defines the desired state of LoadPattern.
            properties:
              maxVUs:
                description: Maximum number of VUs to allow for allocation during
                  Experiment. Equivalent to the "ramping-arrival-rate" executor's
                  `maxVUs` option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                format: int64
                minimum: 0
                type: integer
              preAllocatedVUs:
                description: Number of VUs to pre-allocate before Experiment start.
                  Equivalent to the "ramping-arrival-rate" executor's `preAllocatedVUs`
                  option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                format: int64
                minimum: 0
                type: integer
              stages:
                description: List of stages in the LoadPattern. Equivalent to the
                  "ramping-arrival-rate" executor's `stages` option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                items:
                  description: Stage defines how the load ramps up or down.
                  properties:
                    duration:
                      description: Duration of the stage, also the time to reach the
                        target load. Equivalent to the "ramping-arrival-rate" executor's
                        `stages[].duration` option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                        for more details.
                      type: string
                    target:
                      description: Target load to reach at the end of the stage. Equivalent
                        to the "ramping-arrival-rate" executor's `stages[].target`
                        option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                        for more details.
                      format: int64
                      minimum: 0
                      type: integer
                  required:
                  - duration
                  - target
                  type: object
                minItems: 1
                type: array
              startRate:
                description: Number of requests per `timeUnit` period at Experiment
                  start. Equivalent to the "ramping-arrival-rate" executor's `startRate`
                  option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                format: int64
                minimum: 0
                type: integer
              timeUnit:
                description: Period of time to apply to the `startRate` and `stages[].target`
                  fields. Equivalent to the "ramping-arrival-rate" executor's `timeUnit`
                  option in K6. See https://k6.io/docs/using-k6/scenarios/executors/ramping-arrival-rate/#options
                  for more details.
                type: string
            required:
            - stages
            - startRate
            type: object
          status:
            description: LoadPatternStatus defines the observed state of LoadPattern.
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: netcosts.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: NetCost
    listKind: NetCostList
    plural: netcosts
    singular: netcost
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: NetCost is the Schema for the netcosts API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NetCostSpec defines the desired state of NetCost.
            properties:
              netCostPerMB:
                description: The cost per MB of data transfer. The value should be
                  a float number in string format.
                type: string
              processedDataRetentionPolicyMonths:
                description: The number of months the processed data is retained.
                type: integer
              processedDataStoreCostPerMBMonth:
                description: The cost per MB per month of processed data storage.
                  The value should be a float number in string format.
                type: string
              rawDataRetentionPolicyMonths:
                description: The number of months the raw data is retained.
                type: integer
              rawDataStoreCostPerMBMonth:
                description: The cost per MB per month of raw data storage. The value
                  should be a float number in string format.
                type: string
            required:
            - netCostPerMB
            - processedDataRetentionPolicyMonths
            - processedDataStoreCostPerMBMonth
            - rawDataRetentionPolicyMonths
            - rawDataStoreCostPerMBMonth
            type: object
          status:
            description: NetCostStatus defines the observed state of NetCost.
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: pipelines.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: Pipeline
    listKind: PipelineList
    plural: pipelines
    singular: pipeline
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.availability
      name: Availability
      type: string
    - jsonPath: .status.liveness
      name: Liveness
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Pipeline is the Schema for the pipelines API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PipelineSpec defines the desired state of Pipeline.
            properties:
              cloudProvider:
                description: Cloud provider of the Pipeline. Available values are
                  `aws`, `azure`, and `gcp`.
                enum:
                - aws
                - azure
                - gcp
                type: string
              enableCostCalculation:
                description: Whether to enable cost calculation for the Pipeline.
                type: boolean
              healthCheckURLs:
                description: List of URLs for health check. An HTTP GET request will
                  be made to each URL, and all of them should return 200 OK to pass
                  the health check. If the list is empty, no health check will be
                  performed.
                items:
                  type: string
                minItems: 1
                type: array
              inCluster:
                description: Whether the Pipeline is deployed within the cluster or
                  not. When set to `false`, Services of type ExternalName will be
                  created to access the Pipeline. When set to `true`, the Pipeline
                  will be accessed by its Services.
                type: boolean
              metricsEndpoint:
                description: Endpoint for metrics scraping.
                properties:
                  http:
                    description: Configurations of the HTTP protocol. Only the `http.url`
                      field will be used. Must be set if `inCluster` is set to `false`
                      in the Pipeline.
                    properties:
                      headers:
                        additionalProperties:
                          type: string
                        description: Headers of the HTTP request.
                        type: object
                      method:
                        description: Method of the HTTP request.
                        type: string
                      url:
                        description: URL of the HTTP request.
                        type: string
                    required:
                    - method
                    - url
                    type: object
                  path:
                    description: Path of the endpoint. Effective only when `inCluster`
                      is set to `true` in the Pipeline. Default to "/metrics".
                    type: string
                  port:
                    description: Name of the Service port to use. Effective only when
                      `inCluster` is set to `true` in the Pipeline. Default to "metrics".
                    type: string
                  serviceRef:
                    description: Reference to the Service. The Service must be in
                      the same namespace as the Pipeline. Must be set if `inCluster`
                      is set to `true` in the Pipeline.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                type: object
              pipelineEndpoints:
                description: List of endpoints for data ingestion.
                items:
                  description: PipelineEndpoint defines the endpoint for data ingestion
                    in Pipeline.
                  properties:
                    http:
                      description: Configurations of the HTTP protocol.
                      properties:
                        headers:
                          additionalProperties:
                            type: string
                          description: Headers of the HTTP request.
                          type: object
                        method:
                          description: Method of the HTTP request.
                          type: string
                        url:
                          description: URL of the HTTP request.
                          type: string
                      required:
                      - method
                      - url
                      type: object
                    name:
                      description: Name of the endpoint.
                      type: string
                  required:
                  - http
                  - name
                  type: object
                minItems: 1
                type: array
              tags:
                additionalProperties:
                  type: string
                description: Map of tags to select cloud resources of the Pipeline.
                  Equivalent to the tags in the cloud service provider.
                type: object
            required:
            - pipelineEndpoints
            type: object
          status:
            description: PipelineStatus defines the observed state of Pipeline.
            properties:
              availability:
                description: Availability of the Pipeline.
                type: string
            type: object
        type: object
        x-kubernetes-validations:
        - message: must contain at most 55 characters
          rule: size(self.metadata.name) <= 55
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: plantdcores.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: PlantDCore
    listKind: PlantDCoreList
    plural: plantdcores
    singular: plantdcore
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.proxyStatus.text
      name: Proxy
      type: string
    - jsonPath: .status.studioStatus.text
      name: Studio
      type: string
    - jsonPath: .status.prometheusStatus.text
      name: Prometheus
      type: string
    - jsonPath: .status.thanosStoreStatus.text
      name: Thanos-Store
      type: string
    - jsonPath: .status.thanosCompactorStatus.text
      name: Thanos-Compactor
      type: string
    - jsonPath: .status.thanosQuerierStatus.text
      name: Thanos-Querier
      type: string
    - jsonPath: .status.redisStatus.text
      name: Redis
      type: string
    - jsonPath: .status.opencostStatus.text
      name: OpenCost
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: PlantDCore is the Schema for the plantdcores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PlantDCoreSpec defines the desired state of PlantDCore.
            properties:
              opencost:
                description: OpenCost configuration.
                properties:
                  image:
                    description: Container image to use for OpenCost.
                    type: string
                  replicas:
                    description: Number of replicas.
                    format: int32
                    minimum: 1
                    type: integer
                  resources:
                    description: Resources requirements for OpenCost.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  uiImage:
                    description: Container image to use for OpenCost-UI.
                    type: string
                  uiResources:
                    description: Resources requirements for OpenCost-UI.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                type: object
              prometheus:
                description: Prometheus configuration.
                properties:
                  image:
                    description: Container image to use for the Prometheus. Must be
                      synced with the `version` field.
                    type: string
                  replicas:
                    description: Number of replicas.
                    format: int32
                    minimum: 1
                    type: integer
                  resources:
                    description: Resources requirements.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  scrapeInterval:
                    description: Interval at which Prometheus scrapes metrics.
                    pattern: ^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$
                    type: string
                  version:
                    description: Prometheus version. Must be synced with the `image`
                      field.
                    type: string
                type: object
              proxy:
                description: PlantD-Proxy configuration.
                properties:
                  image:
                    description: Container image to use.
                    type: string
                  replicas:
                    description: Number of replicas.
                    format: int32
                    minimum: 1
                    type: integer
                  resources:
                    description: Resources requirements.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                type: object
              redis:
                description: Redis configuration.
                properties:
                  image:
                    description: Container image to use.
                    type: string
                  replicas:
                    description: Number of replicas.
                    format: int32
                    minimum: 1
                    type: integer
                  resources:
                    description: Resources requirements.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  storageSize:
                    anyOf:
                    - type: integer
                    - type: string
                    description: Storage size.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                type: object
              studio:
                description: PlantD-Studio configuration.
                properties:
                  image:
                    description: Container image to use.
                    type: string
                  replicas:
                    description: Number of replicas.
                    format: int32
                    minimum: 1
                    type: integer
                  resources:
                    description: Resources requirements.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                type: object
              thanos:
                description: Thanos configuration.
                properties:
                  compactor:
                    description: Thanos-Compactor configuration. The `compactor.image`
                      field is always ignored. This field is ignored if `objectStoreConfig`
                      is not set.
                    properties:
                      image:
                        description: Container image to use.
                        type: string
                      replicas:
                        description: Number of replicas.
                        format: int32
                        minimum: 1
                        type: integer
                      resources:
                        description: Resources requirements.
                        properties:
                          claims:
                            description: "Claims lists the names of resources, defined
                              in spec.resourceClaims, that are used by this container.
                              \n This is an alpha field and requires enabling the
                              DynamicResourceAllocation feature gate. \n This field
                              is immutable. It can only be set for containers."
                            items:
                              description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                              properties:
                                name:
                                  description: Name must match the name of one entry
                                    in pod.spec.resourceClaims of the Pod where this
                                    field is used. It makes that resource available
                                    inside a container.
                                  type: string
                              required:
                              - name
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                            - name
                            x-kubernetes-list-type: map
                          limits:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                          requests:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Requests describes the minimum amount of
                              compute resources required. If Requests is omitted for
                              a container, it defaults to Limits if that is explicitly
                              specified, otherwise to an implementation-defined value.
                              Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                        type: object
                      storageSize:
                        anyOf:
                        - type: integer
                        - type: string
                        description: Storage size.
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                    type: object
                  image:
                    description: Container image to use for the Thanos. Must be synced
                      with the `version` field.
                    type: string
                  objectStoreConfig:
                    description: Object store configuration for Thanos. Set this field
                      will enable upload in Thanos-Sidecar, and deploy Thanos-Store
                      and Thanos-Compactor.
                    properties:
                      key:
                        description: The key of the secret to select from.  Must be
                          a valid secret key.
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                      optional:
                        description: Specify whether the Secret or its key must be
                          defined
                        type: boolean
                    required:
                    - key
                    type: object
                    x-kubernetes-map-type: atomic
                  querier:
                    description: Thanos-Querier configuration. The `querier.image`
                      and `querier.storageSize` fields are always ignored.
                    properties:
                      image:
                        description: Container image to use.
                        type: string
                      replicas:
                        description: Number of replicas.
                        format: int32
                        minimum: 1
                        type: integer
                      resources:
                        description: Resources requirements.
                        properties:
                          claims:
                            description: "Claims lists the names of resources, defined
                              in spec.resourceClaims, that are used by this container.
                              \n This is an alpha field and requires enabling the
                              DynamicResourceAllocation feature gate. \n This field
                              is immutable. It can only be set for containers."
                            items:
                              description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                              properties:
                                name:
                                  description: Name must match the name of one entry
                                    in pod.spec.resourceClaims of the Pod where this
                                    field is used. It makes that resource available
                                    inside a container.
                                  type: string
                              required:
                              - name
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                            - name
                            x-kubernetes-list-type: map
                          limits:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                          requests:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Requests describes the minimum amount of
                              compute resources required. If Requests is omitted for
                              a container, it defaults to Limits if that is explicitly
                              specified, otherwise to an implementation-defined value.
                              Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                        type: object
                      storageSize:
                        anyOf:
                        - type: integer
                        - type: string
                        description: Storage size.
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                    type: object
                  sidecar:
                    description: Thanos-Sidecar configuration. The `sidecar.replicas`,
                      `sidecar.image` and `sidecar.storageSize` fields are always
                      ignored.
                    properties:
                      image:
                        description: Container image to use.
                        type: string
                      replicas:
                        description: Number of replicas.
                        format: int32
                        minimum: 1
                        type: integer
                      resources:
                        description: Resources requirements.
                        properties:
                          claims:
                            description: "Claims lists the names of resources, defined
                              in spec.resourceClaims, that are used by this container.
                              \n This is an alpha field and requires enabling the
                              DynamicResourceAllocation feature gate. \n This field
                              is immutable. It can only be set for containers."
                            items:
                              description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                              properties:
                                name:
                                  description: Name must match the name of one entry
                                    in pod.spec.resourceClaims of the Pod where this
                                    field is used. It makes that resource available
                                    inside a container.
                                  type: string
                              required:
                              - name
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                            - name
                            x-kubernetes-list-type: map
                          limits:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                          requests:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Requests describes the minimum amount of
                              compute resources required. If Requests is omitted for
                              a container, it defaults to Limits if that is explicitly
                              specified, otherwise to an implementation-defined value.
                              Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                        type: object
                      storageSize:
                        anyOf:
                        - type: integer
                        - type: string
                        description: Storage size.
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                    type: object
                  store:
                    description: Thanos-Store configuration. The `store.image` field
                      is always ignored. This field is ignored if `objectStoreConfig`
                      is not set.
                    properties:
                      image:
                        description: Container image to use.
                        type: string
                      replicas:
                        description: Number of replicas.
                        format: int32
                        minimum: 1
                        type: integer
                      resources:
                        description: Resources requirements.
                        properties:
                          claims:
                            description: "Claims lists the names of resources, defined
                              in spec.resourceClaims, that are used by this container.
                              \n This is an alpha field and requires enabling the
                              DynamicResourceAllocation feature gate. \n This field
                              is immutable. It can only be set for containers."
                            items:
                              description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                              properties:
                                name:
                                  description: Name must match the name of one entry
                                    in pod.spec.resourceClaims of the Pod where this
                                    field is used. It makes that resource available
                                    inside a container.
                                  type: string
                              required:
                              - name
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                            - name
                            x-kubernetes-list-type: map
                          limits:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                          requests:
                            additionalProperties:
                              anyOf:
                              - type: integer
                              - type: string
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            description: 'Requests describes the minimum amount of
                              compute resources required. If Requests is omitted for
                              a container, it defaults to Limits if that is explicitly
                              specified, otherwise to an implementation-defined value.
                              Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                            type: object
                        type: object
                      storageSize:
                        anyOf:
                        - type: integer
                        - type: string
                        description: Storage size.
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                    type: object
                  version:
                    description: Thanos version. Must be synced with the `image` field.
                    type: string
                type: object
            type: object
          status:
            description: PlantDCoreStatus defines the observed state of PlantDCore.
            properties:
              opencostStatus:
                description: OpenCost status.
                properties:
                  numDesired:
                    description: Number of desired replicas.
                    format: int32
                    type: integer
                  numReady:
                    description: Number of ready replicas.
                    format: int32
                    type: integer
                  text:
                    description: Component status string.
                    type: string
                type: object
              prometheusStatus:
                description: Prometheus status.
                properties:
                  numDesired:
                    description: Number of desired replicas.
                    format: int32
                    type: integer
                  numReady:
                    description: Number of ready replicas.
                    format: int32
                    type: integer
                  text:
                    description: Component status string.
                    type: string
                type: object
              proxyStatus:
                description: PlantD-Proxy status.
                properties:
                  numDesired:
                    description: Number of desired replicas.
                    format: int32
                    type: integer
                  numReady:
                    description: Number of ready replicas.
                    format: int32
                    type: integer
                  text:
                    description: Component status string.
                    type: string
                type: object
              redisStatus:
                description: Redis status.
                properties:
                  numDesired:
                    description: Number of desired replicas.
                    format: int32
                    type: integer
                  numReady:
                    description: Number of ready replicas.
                    format: int32
                    type: integer
                  text:
                    description: Component status string.
                    type: string
                type: object
              studioStatus:
                description: PlantD-Studio status.
                properties:
                  numDesired:
                    description: Number of desired replicas.
                    format: int32
                    type: integer
                  numReady:
                    description: Number of ready replicas.
                    format: int32
                    type: integer
                  text:
                    description: Component status string.
                    type: string
                type: object
              thanosCompactorStatus:
                description: Thanos-Compactor status.
                properties:
                  numDesired:
                    description: Number of desired replicas.
                    format: int32
                    type: integer
                  numReady:
                    description: Number of ready replicas.
                    format: int32
                    type: integer
                  text:
                    description: Component status string.
                    type: string
                type: object
              thanosQuerierStatus:
                description: Thanos-Querier status.
                properties:
                  numDesired:
                    description: Number of desired replicas.
                    format: int32
                    type: integer
                  numReady:
                    description: Number of ready replicas.
                    format: int32
                    type: integer
                  text:
                    description: Component status string.
                    type: string
                type: object
              thanosStoreStatus:
                description: Thanos-Store status.
                properties:
                  numDesired:
                    description: Number of desired replicas.
                    format: int32
                    type: integer
                  numReady:
                    description: Number of ready replicas.
                    format: int32
                    type: integer
                  text:
                    description: Component status string.
                    type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: scenarios.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: Scenario
    listKind: ScenarioList
    plural: scenarios
    singular: scenario
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Scenario is the Schema for the scenarios API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ScenarioSpec defines the desired state of Scenario
            properties:
              tasks:
                description: List of tasks in the Scenario.
                items:
                  description: ScenarioTask defines the task in the Scenario.
                  properties:
                    monthsRelevant:
                      description: List of months the task will apply to. For example,
                        `[1, 12]` means the task will apply to January and December.
                      items:
                        type: integer
                      type: array
                    name:
                      description: Name of the task. Should be a Schema name.
                      type: string
                    pushFrequencyPerMonth:
                      description: Range of the frequency of data pushes per month.
                      properties:
                        max:
                          description: Maximum value of the range.
                          format: int32
                          minimum: 0
                          type: integer
                        min:
                          description: Minimum value of the range.
                          format: int32
                          minimum: 0
                          type: integer
                      required:
                      - max
                      - min
                      type: object
                    sendingDevices:
                      description: Range of the number range of the devices to send
                        the data.
                      properties:
                        max:
                          description: Maximum value of the range.
                          format: int32
                          minimum: 0
                          type: integer
                        min:
                          description: Minimum value of the range.
                          format: int32
                          minimum: 0
                          type: integer
                      required:
                      - max
                      - min
                      type: object
                    size:
                      anyOf:
                      - type: integer
                      - type: string
                      description: The size of a single upload in bytes.
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                  required:
                  - monthsRelevant
                  - name
                  - pushFrequencyPerMonth
                  - sendingDevices
                  - size
                  type: object
                minItems: 1
                type: array
            required:
            - tasks
            type: object
          status:
            description: ScenarioStatus defines the observed state of Scenario
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: schemas.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: Schema
    listKind: SchemaList
    plural: schemas
    singular: schema
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Schema is the Schema for the schemas API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SchemaSpec defines the desired state of Schema.
            properties:
              columns:
                description: List of columns in the Schema.
                items:
                  description: Column defines the column in Schema.
                  properties:
                    formula:
                      description: Formula to be applied for populating the data in
                        the column. This field has precedence over the `type` fields.
                      properties:
                        args:
                          description: Arguments to be passed to the formula. Used
                            together with the `name` field. See https://plantd.org/docs/reference/formulas
                            for available values.
                          items:
                            type: string
                          type: array
                        name:
                          description: Name of the formula. Used together with the
                            `args` field. See https://plantd.org/docs/reference/formulas
                            for available values.
                          type: string
                      required:
                      - name
                      type: object
                    name:
                      description: Name of the column.
                      type: string
                    params:
                      additionalProperties:
                        type: string
                      description: Map of parameters for generating the data in the
                        column. Used together with the `type` field. For any parameters
                        not provided but required by the data type, the default value
                        will be used, if available. Will ignore any parameters not
                        used by the data type. See https://plantd.org/docs/reference/types-and-params
                        for available values.
                      type: object
                    type:
                      description: Data type of the random data to be generated in
                        the column. Used together with the `params` field. It should
                        be a valid function name in gofakeit, which can be parsed
                        by gofakeit.GetFuncLookup(). `formula` field has precedence
                        over this field. See https://plantd.org/docs/reference/types-and-params
                        for available values.
                      type: string
                  required:
                  - name
                  type: object
                minItems: 1
                type: array
            required:
            - columns
            type: object
          status:
            description: SchemaStatus defines the observed state of Schema.
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: simulations.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: Simulation
    listKind: SimulationList
    plural: simulations
    singular: simulation
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.jobStatus
      name: JobStatus
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Simulation is the Schema for the simulations API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SimulationSpec defines the desired state of Simulation
            properties:
              digitalTwinRef:
                description: DigitalTwin object for the Simulation.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              image:
                description: Container image to use for the simulation.
                type: string
              netCostRef:
                description: NetCost object for the Simulation. Optional if the `digitalTwinType`
                  field is unspecified or the DigitalTwin is of type `schemaaware`.
                  Always ignored otherwise.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              scenarioRef:
                description: Scenario object for the Simulation. The task names in
                  the Scenario must be the name of a Schema in the DataSet used by
                  the DigitalTwin. Required if the `digitalTwinType` field is unspecified
                  or the DigitalTwin is of type `schemaaware`. Always ignored otherwise.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              trafficModelRef:
                description: TrafficModel object for the Simulation.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
            required:
            - trafficModelRef
            type: object
          status:
            description: SimulationStatus defines the observed state of Simulation
            properties:
              error:
                description: Error message.
                type: string
              jobStatus:
                description: Status of the digital twin job.
                type: string
            type: object
        type: object
        x-kubernetes-validations:
        - message: must contain at most 53 characters
          rule: size(self.metadata.name) <= 53
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: trafficmodels.windtunnel.plantd.org
spec:
  group: windtunnel.plantd.org
  names:
    kind: TrafficModel
    listKind: TrafficModelList
    plural: trafficmodels
    singular: trafficmodel
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: TrafficModel is the Schema for the trafficmodels API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the specifications of the TrafficModel.
            properties:
              config:
                description: TrafficModel configuration in JSON.
                type: string
            required:
            - config
            type: object
          status:
            description: Status defines the status of the TrafficModel.
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: controller-manager-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-controller-manager
  namespace: plantd-operator-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: opencost-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-opencost
  namespace: plantd-operator-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: prometheus-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-prometheus
  namespace: plantd-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-leader-election-role
  namespace: plantd-operator-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: plantd-operator-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - k6.io
  resources:
  - testruns
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - monitoring.coreos.com
  resources:
  - prometheuses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - costexporters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - costexporters/finalizers
  verbs:
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - costexporters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - datasets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - datasets/finalizers
  verbs:
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - datasets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - digitaltwins
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - digitaltwins/finalizers
  verbs:
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - digitaltwins/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - experiments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - experiments/finalizers
  verbs:
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - experiments/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - loadpatterns
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - netcosts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - pipelines
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - pipelines/finalizers
  verbs:
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - pipelines/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - plantdcores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - plantdcores/finalizers
  verbs:
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - plantdcores/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - scenarios
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - schemas
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - simulations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - simulations/finalizers
  verbs:
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - simulations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - windtunnel.plantd.org
  resources:
  - trafficmodels
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: plantd-operator-opencost-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - deployments
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  - deployments
  - daemonsets
  - replicasets
  verbs:
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: plantd-operator-prometheus-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-leader-election-rolebinding
  namespace: plantd-operator-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: plantd-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: plantd-operator-controller-manager
  namespace: plantd-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: plantd-operator-manager-role
subjects:
- kind: ServiceAccount
  name: plantd-operator-controller-manager
  namespace: plantd-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: opencost-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-opencost-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: plantd-operator-opencost-role
subjects:
- kind: ServiceAccount
  name: plantd-operator-opencost
  namespace: plantd-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: prometheus-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-prometheus-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: plantd-operator-prometheus-role
subjects:
- kind: ServiceAccount
  name: plantd-operator-prometheus
  namespace: plantd-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: plantd-operator
  name: plantd-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: plantd-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: plantd-operator-controller-manager
  namespace: plantd-operator-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: plantd-operator
    control-plane: controller-manager
  name: plantd-operator-controller-manager-metrics-service
  namespace: plantd-operator-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: plantd-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: plantd-operator
    control-plane: controller-manager
  name: plantd-operator-controller-manager
  namespace: plantd-operator-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.14.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: ghcr.io/carnegiemellon-plantd/plantd-controller:latest
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: plantd-operator-controller-manager
      terminationGracePeriodSeconds: 10
---
apiVersion: windtunnel.plantd.org/v1alpha1
kind: PlantDCore
metadata:
  namespace: plantd-operator-system
  name: default
spec: {}
